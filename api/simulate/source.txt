import type { VercelRequest, VercelResponse } from "@vercel/node";

// --- 型定義 ---
interface YearlyData {
  year: number;            // 実年
  age: number;             // 本人年齢
  totalAssets: number;     // 総資産（円）
  savings: number;         // 現預金（円）
  investment: number;      // 積立元本累計（円）
  income: number;          // 年収＋運用益（円）
  expense: number;         // 生活費＋子ども費＋介護費＋退職差額（円）
  balance: number;         // 当年収支（円）
  childExpense: number;    // 子ども費用（円）
  careExpense: number;     // 介護費用（円）
  retirementExpense: number; // 退職以降の差額費（円）
  totalExpense: number;    // expenseと同義（将来の拡張用に保持）
  incomeDetail: {
    totalNetAnnualIncome: number;
    investmentReturn: number;
  };
  expenseDetail: {
    livingExpense: number;
    childExpense: number;
    careExpense: number;
    retirementExpense: number;
    carExpense: number;
    housingExpense: number;
    marriageExpense: number;
    applianceExpense: number;
    yearlyRecurringInvestmentJPY: number;
    yearlySpotJPY: number;
  };
}
interface InputParams {
  initialAge: number;
  spouseInitialAge?: number;
  endAge: number;
  retirementAge: number;
  pensionStartAge: number;

  mainJobIncomeGross: number;
  sideJobIncomeGross: number;
  spouseMainJobIncomeGross?: number;
  spouseSideJobIncomeGross?: number;
  incomeGrowthRate: number;
  spouseIncomeGrowthRate?: number;

  expenseMode: 'simple' | 'detailed';
  livingCostSimpleAnnual?: number;
  detailedFixedAnnual?: number;
  detailedVariableAnnual?: number;

  car: {
    priceJPY: number;
    firstAfterYears: number;
    frequencyYears: number;
    loan: {
      use: boolean;
      years?: number;
      type?: '銀行ローン' | 'ディーラーローン';
    };
  };

  housing: {
    type: '賃貸' | '持ち家（ローン中）' | '持ち家（完済）';
    currentLoan?: {
      monthlyPaymentJPY: number;
      remainingYears: number;
    };
    purchasePlan?: {
      age: number;
      priceJPY: number;
      downPaymentJPY: number;
      years: number;
      rate: number;
    };
    renovations: {
      age: number;
      costJPY: number;
      cycleYears?: number;
    }[];
  };

  marriage?: {
    age: number;
    engagementJPY: number;
    weddingJPY: number;
    honeymoonJPY: number;
    movingJPY: number;
  };

  children?: {
    count: number;
    firstBornAge: number;
    educationPattern: '公立中心' | '公私混合' | '私立中心';
  };

  appliances: {
    name: string;
    cycleYears: number;
    firstAfterYears: number;
    cost10kJPY: number;
  }[];

  care: {
    assume: boolean;
    parentCurrentAge: number;
    parentCareStartAge: number;
    years: number;
    monthly10kJPY: number;
  };

  postRetirementLiving10kJPY: number;
  pensionMonthly10kJPY: number;

  currentSavingsJPY: number;
  monthlySavingsJPY: number;

  currentInvestmentsJPY: number;
  yearlyRecurringInvestmentJPY: number;
  yearlySpotJPY: number;
  expectedReturn: number;
  stressTest: {
    enabled: boolean;
  };

  interestScenario: '固定利回り' | 'ランダム変動';
  emergencyFundJPY: number;
}

interface YearlyData {
  year: number;            // 実年
  age: number;             // 本人年齢
  totalAssets: number;     // 総資産（円）
  savings: number;         // 現預金（円）
  investment: number;      // 積立元本累計（円）
  income: number;          // 年収＋運用益（円）
  expense: number;         // 生活費＋子ども費＋介護費＋退職差額（円）
  balance: number;         // 当年収支（円）
  childExpense: number;    // 子ども費用（円）
  careExpense: number;     // 介護費用（円）
  retirementExpense: number; // 退職以降の差額費（円）
  totalExpense: number;    // expenseと同義（将来の拡張用に保持）
}

const incomeBrackets = [
  { "min": 0,       "max": 999999,    "rate": 0.90 },
  { "min": 1000000, "max": 1999999,   "rate": 0.88 },
  { "min": 2000000, "max": 2999999,   "rate": 0.86 },
  { "min": 3000000, "max": 3999999,   "rate": 0.84 },
  { "min": 4000000, "max": 4999999,   "rate": 0.82 },
  { "min": 5000000, "max": 5999999,   "rate": 0.80 },
  { "min": 6000000, "max": 6999999,   "rate": 0.78 },
  { "min": 7000000, "max": 7999999,   "rate": 0.76 },
  { "min": 8000000, "max": 8999999,   "rate": 0.75 },
  { "min": 9000000, "max": 9999999,   "rate": 0.74 },
  { "min": 10000000, "max": 11999999, "rate": 0.73 },
  { "min": 12000000, "max": 14999999, "rate": 0.72 },
  { "min": 15000000, "max": 19999999, "rate": 0.70 },
  { "min": 20000000, "max": null,     "rate": 0.68 }
];

function computeNetAnnual(gross: number): number {
  const bracket = incomeBrackets.find(b => gross >= b.min && (b.max === null || gross <= b.max));
  return bracket ? gross * bracket.rate : gross * 0.8; // Fallback if no bracket matches
}

const calculateLoanPayment = (principal: number, annualInterestRate: number, years: number): number => {
  if (principal <= 0 || annualInterestRate < 0 || years <= 0) {
    return 0;
  }

  const monthlyInterestRate = annualInterestRate / 100 / 12;
  const totalMonths = years * 12;

  if (monthlyInterestRate === 0) {
    return principal / years;
  }

  const monthlyPayment = principal * monthlyInterestRate * Math.pow((1 + monthlyInterestRate), totalMonths) / (Math.pow((1 + monthlyInterestRate), totalMonths) - 1);
  return monthlyPayment * 12;
};

export default function handler(req: VercelRequest, res: VercelResponse) {
  // --- メソッド検証 ---
  if (req.method !== "POST") {
    res.setHeader("Allow", "POST");
    return res.status(405).json({ message: "Method Not Allowed" });
  }

  try {
    // --- 入力正規化とバリデーション ---
    const body = (req.body?.inputParams ?? req.body) as Partial<InputParams>;

    const n = (v: unknown, def = 0): number => {
      const num = Number(v);
      return Number.isFinite(num) ? num : def;
    };

    const initialAge = Math.max(0, n(body.initialAge));
    
    const endAge = Math.max(0, n(body.endAge));
    let retirementAge = Math.max(0, n(body.retirementAge));
    const pensionStartAge = Math.max(0, n(body.pensionStartAge));

    // Gross incomes from frontend
    const mainJobIncomeGross = n(body.mainJobIncomeGross);
    const sideJobIncomeGross = n(body.sideJobIncomeGross);
    const spouseMainJobIncomeGross = n(body.spouseMainJobIncomeGross);
    const spouseSideJobIncomeGross = n(body.spouseSideJobIncomeGross);

    const incomeGrowthRate = n(body.incomeGrowthRate);
    const spouseIncomeGrowthRate = n(body.spouseIncomeGrowthRate);

    const expenseMode = body.expenseMode || 'simple';
    const livingCostSimpleAnnual = n(body.livingCostSimpleAnnual);
    const detailedFixedAnnual = n(body.detailedFixedAnnual);
    const detailedVariableAnnual = n(body.detailedVariableAnnual);

    const carPriceJPY = n(body.car?.priceJPY);
    const carFirstAfterYears = n(body.car?.firstAfterYears);
    const carFrequencyYears = n(body.car?.frequencyYears);
    const carLoanUse = body.car?.loan?.use || false;
    const carLoanYears = n(body.car?.loan?.years);
    const carLoanType = body.car?.loan?.type;

    const housingType = body.housing?.type || '賃貸';
    const currentLoanMonthlyPaymentJPY = n(body.housing?.currentLoan?.monthlyPaymentJPY);
    const currentLoanRemainingYears = n(body.housing?.currentLoan?.remainingYears);
    const housePurchasePlanAge = n(body.housing?.purchasePlan?.age);
    const housePurchasePlanPriceJPY = n(body.housing?.purchasePlan?.priceJPY);
    const housePurchasePlanDownPaymentJPY = n(body.housing?.purchasePlan?.downPaymentJPY);
    const housePurchasePlanYears = n(body.housing?.purchasePlan?.years);
    const housePurchasePlanRate = n(body.housing?.purchasePlan?.rate);
    const houseRenovations = body.housing?.renovations || [];

    const marriageAge = n(body.marriage?.age);
    const engagementJPY = n(body.marriage?.engagementJPY);
    const weddingJPY = n(body.marriage?.weddingJPY);
    const honeymoonJPY = n(body.marriage?.honeymoonJPY);
    const movingJPY = n(body.marriage?.movingJPY);

    const numberOfChildren = n(body.children?.count);
    const firstBornAge = n(body.children?.firstBornAge);
    const educationPattern = body.children?.educationPattern || '公立中心';

    const appliances = body.appliances || [];

    const parentCareAssume = body.care?.assume || false;
    const parentCurrentAge = n(body.care?.parentCurrentAge);
    const parentCareStartAge = n(body.care?.parentCareStartAge);
    const parentCareYears = n(body.care?.years);
    const parentCareMonthlyCost10kJPY = n(body.care?.monthly10kJPY);

    const postRetirementLiving10kJPY = n(body.postRetirementLiving10kJPY);
    const pensionMonthly10kJPY = n(body.pensionMonthly10kJPY);

    const currentSavingsJPY = n(body.currentSavingsJPY);
    const monthlySavingsJPY = n(body.monthlySavingsJPY);

    const currentInvestmentsJPY = n(body.currentInvestmentsJPY);
    const yearlyRecurringInvestmentJPY = n(body.yearlyRecurringInvestmentJPY);
    const yearlySpotJPY = n(body.yearlySpotJPY);
    const expectedReturn = n(body.expectedReturn);
    const stressTestEnabled = body.stressTest?.enabled || false;

    const interestScenario = body.interestScenario || '固定利回り';
    const emergencyFundJPY = n(body.emergencyFundJPY);

    // retirementAgeはinitialAge未満にならないように矯正
    retirementAge = Math.max(initialAge, retirementAge);

    // 予測年数の上限
    const maxYears = Math.max(0, endAge - initialAge);

    // --- シミュレーション準備 ---
    const yearlyData: YearlyData[] = [];
    let savings = currentSavingsJPY;
    let investedPrincipal = currentInvestmentsJPY;
    let totalAssets = savings + investedPrincipal;

    // 教育費の年額を計算
    let educationCostPerChild = 0;
    switch (educationPattern) {
      case '公私混合': educationCostPerChild = 16000000; break;
      case '私立中心': educationCostPerChild = 20000000; break;
      default: educationCostPerChild = 10000000; break; // 公立中心
    }
    

    // 介護開始年齢（本人）を計算
    const careStartAtMyAge = (parentCareStartAge >= parentCurrentAge)
      ? initialAge + (parentCareStartAge - parentCurrentAge)
      : -1; // 開始不能な場合は-1

    // --- 年次ループ ---
    for (let i = 0; i <= maxYears; i++) {
      const age = initialAge + i;

      // 退職以降は給与収入を0にする
      const isRetired = age >= retirementAge;

      // Apply growth rates to gross incomes annually
      const currentMainJobIncomeGross = (isRetired ? 0 : mainJobIncomeGross) * Math.pow(1 + incomeGrowthRate, i);
      const currentSideJobIncomeGross = (isRetired ? 0 : sideJobIncomeGross) * Math.pow(1 + incomeGrowthRate, i);
      const currentSpouseMainJobIncomeGross = (isRetired ? 0 : spouseMainJobIncomeGross) * Math.pow(1 + spouseIncomeGrowthRate, i);
      const currentSpouseSideJobIncomeGross = (isRetired ? 0 : spouseSideJobIncomeGross) * Math.pow(1 + spouseIncomeGrowthRate, i);

      // Calculate net incomes for the current year
      const selfNetAnnual = computeNetAnnual(currentMainJobIncomeGross) + computeNetAnnual(currentSideJobIncomeGross);
      const spouseNetAnnual = computeNetAnnual(currentSpouseMainJobIncomeGross) + computeNetAnnual(currentSpouseSideJobIncomeGross);
      const totalNetAnnualIncome = selfNetAnnual + spouseNetAnnual;

      let currentExpectedReturn = expectedReturn; // Default to fixed return

      if (interestScenario === 'ランダム変動' && stressTestEnabled) {
        // Simple random fluctuation for demonstration
        currentExpectedReturn = expectedReturn + (Math.random() - 0.5) * 0.02; // +/- 1% fluctuation
      }
      const investmentReturn = totalAssets * currentExpectedReturn;
      const income = totalNetAnnualIncome + investmentReturn;

      // 2. 支出計算
      let livingExpense = 0;
      if (age < pensionStartAge) { // Only apply living expense if not in retirement expense phase
        if (expenseMode === 'simple') {
          livingExpense = livingCostSimpleAnnual;
        } else {
          livingExpense = detailedFixedAnnual + detailedVariableAnnual;
        }
      }

      // 2b. 子ども費
      let childExpense = 0;
      if (numberOfChildren > 0 && firstBornAge > 0) {
        for (let childIndex = 0; childIndex < numberOfChildren; childIndex++) {
          const childBornAge = firstBornAge + (childIndex * 3); // 3年おきに出生
          if (age >= childBornAge && age < childBornAge + 22) { // 22年間教育費がかかる
            childExpense += educationCostPerChild / 22;
          }
        }
      }

      // 2c. 介護費
      let careExpense = 0;
      const isCarePeriod = parentCareAssume &&
                           parentCurrentAge > 0 &&
                           parentCareStartAge >= parentCurrentAge &&
                           parentCareYears > 0 &&
                           parentCareMonthlyCost10kJPY > 0 &&
                           careStartAtMyAge !== -1 &&
                           age >= careStartAtMyAge &&
                           age < careStartAtMyAge + parentCareYears;
      if (isCarePeriod) {
        careExpense = parentCareMonthlyCost10kJPY * 10000 * 12;
      }

      // 2d. 退職後差額費
      let retirementExpense = 0;
      if (age >= pensionStartAge) {
        const annualRetirementCost = postRetirementLiving10kJPY * 10000 * 12;
        const annualPension = pensionMonthly10kJPY * 10000 * 12;
        retirementExpense = Math.max(0, annualRetirementCost - annualPension);
      }

      // 2f. 車費用
      let carExpense = 0;
      if (carPriceJPY > 0 && carFrequencyYears > 0) {
        // Initial car purchase
        if (i === carFirstAfterYears) {
          if (carLoanUse && carLoanYears > 0) {
            let annualRate = 0.025; // default
            if (carLoanType === '銀行ローン') annualRate = 0.015;
            else if (carLoanType === 'ディーラーローン') annualRate = 0.045;
            carExpense += calculateLoanPayment(carPriceJPY, annualRate, carLoanYears);
          } else {
            carExpense += carPriceJPY;
          }
        }
        // Subsequent car replacements
        if (i > carFirstAfterYears && (i - carFirstAfterYears) % carFrequencyYears === 0) {
          if (carLoanUse && carLoanYears > 0) {
            let annualRate = 0.025; // default
            if (carLoanType === '銀行ローン') annualRate = 0.015;
            else if (carLoanType === 'ディーラーローン') annualRate = 0.045;
            carExpense += calculateLoanPayment(carPriceJPY, annualRate, carLoanYears);
          } else {
            carExpense += carPriceJPY;
          }
        }
      }

      // 2g. 住まい費用
      let housingExpense = 0;

      // 住宅購入計画がある場合
      if (housePurchasePlanAge > 0 && age === housePurchasePlanAge) {
        housingExpense += housePurchasePlanDownPaymentJPY; // 頭金
      }

      // ローン返済
      if (housingType === '持ち家（ローン中）' && currentLoanMonthlyPaymentJPY > 0 && currentLoanRemainingYears > 0) {
        // 既存ローン
        housingExpense += currentLoanMonthlyPaymentJPY * 12;
      } else if (housePurchasePlanAge > 0 && age >= housePurchasePlanAge && age < housePurchasePlanAge + housePurchasePlanYears) {
        // 新規購入ローンの返済
        const principal = housePurchasePlanPriceJPY - housePurchasePlanDownPaymentJPY;
        if (principal > 0 && housePurchasePlanYears > 0) {
          if (housePurchasePlanRate === 0) {
            housingExpense += principal / housePurchasePlanYears; // 単純等分
          } else {
            housingExpense += calculateLoanPayment(principal, housePurchasePlanRate, housePurchasePlanYears);
          }
        }
      }

      // リフォーム・修繕
      houseRenovations.forEach(renovation => {
        if (renovation.age > 0 && age >= renovation.age) {
          if (renovation.cycleYears && renovation.cycleYears > 0) {
            if ((age - renovation.age) % renovation.cycleYears === 0) {
              housingExpense += renovation.costJPY;
            }
          } else if (age === renovation.age) {
            housingExpense += renovation.costJPY;
          }
        }
      });

      // 2h. 結婚費用
      let marriageExpense = 0;
      if (marriageAge > 0 && age === marriageAge) {
        marriageExpense = engagementJPY + weddingJPY + honeymoonJPY + movingJPY;
      }

      // 2i. 家電買い替え費用
      let applianceExpense = 0;
      appliances.forEach(appliance => {
        // フィルタリング: 名前が空でない、またはコストが0より大きいもののみを処理
        if (appliance.name && (appliance.cost10kJPY > 0 || appliance.cycleYears > 0 || appliance.firstAfterYears > 0)) {
          // 初回買い替え
          if (appliance.firstAfterYears > 0 && age === initialAge + appliance.firstAfterYears) {
            applianceExpense += appliance.cost10kJPY * 10000;
          }
          // 周期買い替え
          if (appliance.cycleYears > 0 && appliance.firstAfterYears > 0 && age > initialAge + appliance.firstAfterYears) {
            if ((age - (initialAge + appliance.firstAfterYears)) % appliance.cycleYears === 0) {
              applianceExpense += appliance.cost10kJPY * 10000;
            }
          }
        }
      });

      // 2e. 合計費用
      const totalExpense = livingExpense + childExpense + careExpense + retirementExpense + carExpense + housingExpense + marriageExpense + applianceExpense;

      // 3. 収支と資産更新
      const balance = income - totalExpense - yearlyRecurringInvestmentJPY - yearlySpotJPY;
      savings += monthlySavingsJPY * 12; // Add monthly savings to cash at year-end
      savings += balance;
      investedPrincipal += yearlyRecurringInvestmentJPY + yearlySpotJPY;
      
      // 資産がマイナスになった場合の処理
      if (savings < 0) {
        investedPrincipal += savings; // 貯蓄のマイナス分を投資元本から補填
        savings = 0;
        if (investedPrincipal < 0) {
            investedPrincipal = 0; // 投資元本もマイナスになったら0に
        }
      }
      
      totalAssets = savings + investedPrincipal;

      // --- 年次データ作成 ---
      const currentYearData: YearlyData = {
        year: new Date().getFullYear() + i,
        age: age,
        totalAssets: Math.round(totalAssets),
        savings: Math.round(savings),
        investment: Math.round(investedPrincipal),
        income: Math.round(income),
        expense: Math.round(totalExpense),
        balance: Math.round(balance),
        childExpense: Math.round(childExpense),
        careExpense: Math.round(careExpense),
        retirementExpense: Math.round(retirementExpense),
        totalExpense: Math.round(totalExpense),
        incomeDetail: {
          totalNetAnnualIncome: Math.round(totalNetAnnualIncome),
          investmentReturn: Math.round(investmentReturn),
        },
        expenseDetail: {
          livingExpense: Math.round(livingExpense),
          childExpense: Math.round(childExpense),
          careExpense: Math.round(careExpense),
          retirementExpense: Math.round(retirementExpense),
          carExpense: Math.round(carExpense),
          housingExpense: Math.round(housingExpense),
          marriageExpense: Math.round(marriageExpense),
          applianceExpense: Math.round(applianceExpense),
          yearlyRecurringInvestmentJPY: Math.round(yearlyRecurringInvestmentJPY),
          yearlySpotJPY: Math.round(yearlySpotJPY),
        },
      };
      yearlyData.push(currentYearData);

      // --- 自己検証用ログ ---
      if (i < 3) {
        console.log(`--- Year ${i+1} (Age: ${age}) ---`);
        console.log(currentYearData);
      }
    }

    // --- 出力 ---
    res.status(200).json({ yearlyData });

  } catch (error) {
    // --- エラーハンドリング ---
    console.error('Simulation failed:', error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
}